# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@1.3.0

# parameters:
#   workflow-id:
#     type: string
#     default: "${CIRCLE_WORKFLOW_ID:0:7}"
#   memstash-token:
#     type: string
#     default: "b03a5070-d224-4270-80bc-2cf50290d789"

# commands:
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             MIGRATION_STATUS=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
#             if(( $MIGRATION_STATUS=="true" )); 
#             then
#               cd backend
#               npm i
#               npm run migrations:revert
#               echo "Migration reverted"
#             fi
           
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws s3 rm s3://udapeople-<< pipeline.parameters.workflow-id >> --recursive 
#             aws cloudformation delete-stack --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>"
#             aws cloudformation delete-stack --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # return 1(incomment to test)
      - slack/notify:
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend         
            npm install
            npm run build
      - slack/notify:
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout      
      # Restore from cache
      - restore_cache:
          keys: [frontend-build] 
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm run test
      - slack/notify:
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout      
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm run test
      - slack/notify:
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1     

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout        
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]      
      # Your job code here
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm audit --audit-level=critical 
      - slack/notify:
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0      
    steps:
      # Checkout code from git
      - checkout        
      # Restore from cache
      - restore_cache:
          keys: [backend-build]   
      # Your job code here
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity \
              --stack-name prod-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity \
              --stack-name prod-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/backend/

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ab:13:ce:2d:42:16:1f:f8:af:fe:a3:3e:42:d8:e7:b8:cc:16:d3:bb"]
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          working_directory: .circleci/ansible
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          working_directory: .circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm install
      - run:
          name: Run database migrations
          no_output_timeout: 30m
          command: |
            cd backend
            npm run migrations | tee migration_results.txt
            cat migration_results.txt
      - run:
          name: save migrations
          command: |
            cd backend
            if grep "executed successfully" migration_results.txt
            then
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "true" https://api.memstash.io/values/<< pipeline.id >>_migrations
             
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            cat .env
            ls -la
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ab:13:ce:2d:42:16:1f:f8:af:fe:a3:3e:42:d8:e7:b8:cc:16:d3:bb"]
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            echo ENVIROMENT=development > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml        
            

  # smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#       image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-backend, test-frontend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-frontend, deploy-backend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]