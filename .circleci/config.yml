version: 2.1

orbs:
  slack: circleci/slack@4.1.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi   
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # return 1(incomment to test)
      - slack/notify:
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend         
            npm install
            npm run build
      - slack/notify:
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout      
      # Restore from cache
      - restore_cache:
          keys: [frontend-build] 
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm run test
      - slack/notify:
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout      
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm run test
      - slack/notify:
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1     

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout        
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]      
      # Your job code here
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm audit --audit-level=critical 
      - slack/notify:
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0      
    steps:
      # Checkout code from git
      - checkout        
      # Restore from cache
      - restore_cache:
          keys: [backend-build]   
      # Your job code here
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
          channel: '#centurio-1'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: '#centurio-1'  
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout          
      # Checkout code from git
      - run:
          name: Install prerequsites
          command: |
            yum -y install tar gzip jq git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          command: |
            URL=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDNSName' --filters "Name=tag:project,Values=udapeople")
            curl -H "Content-Type: text/plain" -H "token:db089fd7-47e3-40ab-9bc6-96e92f914e8f" --request PUT --data ${URL} https://api.memstash.io/values/udapeople-backend${CIRCLE_WORKFLOW_ID}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      #Here's where you will add some code to rollback on failure      


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: 
            - ab:13:ce:2d:42:16:1f:f8:af:fe:a3:3e:42:d8:e7:b8:cc:16:d3:bb
      
      - attach_workspace:
          at: ./
      - run: mkdir -p  .circleci/ansible/roles/configure-server/files/backend
      - restore_cache:
              keys: 
                - back-end-{{ checksum "backend/package.json" }}

      - run: apk add tar gzip

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Write env vars
          command: |
            cd backend
            echo "ENVIRONMENT=production" > env
            echo "NODE_ENV=production" >> env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> env
      - run:
          name: configure-server 
          command: | 
            pip install awscli && apk add --update ansible 
            cp -rv backend/*  .circleci/ansible/roles/configure-server/files/backend
      - run: ls .circleci/ansible/roles/configure-server/files/backend
      - run: apk update && apk add --upgrade rsync openssh 
      - run: 
          name: Configure server using ansible playbook
          command: ansible-playbook -i inventory.txt .circleci/ansible/configure-server.yml

  run-db-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run Udapeople DB migration
          command: |
            cd backend
            npm install
            npm run db-migrations
            echo [has been executed successfully] >> migration_succeed
      - run:
          name: save udapeople db migrations
          command: |
            cd backend
            if grep "executed successfully" migration_results.txt
            then
            curl -H "Content-Type: text/plain" -H "token: 75c4cc57-8708-4465-968e-3bf5b5121c44" --request PUT --data "true" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID:0:7}
            cat migration_succeed
            fi

  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           cd frontend
           yum -y install tar gzip jq git           
           
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo $API_UR
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["23:a2:ae:dc:92:1e:64:7f:3d:f4:87:4d:32:28:44:09"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli 
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            # echo ENVIROMENT=development > "backend/.env"
            # echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            # echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            # echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            # echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#       image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-db-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [test-feature-branch]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [test-feature-branch]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]